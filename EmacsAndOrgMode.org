#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{cite}
#+LATEX_HEADER: \usepackage{braket,cancel}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{color}

* Why Emacs?

- *Question:* Why Emacs?
- /Answer:/ Because _Org mode_.
- *Question:* Why Org mode?
- /Answer:/ Because [[https://youtu.be/fgizHHd7nOo][Org mode is awesome]]. This is a link to the John
  Kitchin video that got me hooked. But there's a video of a
  [[https://youtu.be/oJTwQvgfgMM][Google talk]] by Carsten Dominik, an Org mode author. 

Check out the videos above to discover just how powerful Org mode really is.

* About This Document

This document was written using the Emacs in Org mode. While the
learning curve for using Emacs is very steep, Emacs is very powerful
because it is extensible. There are very good reasons for using Emacs
in Org mode to write this or other documents. Reasons include:
- Mark-up is easy and is supported in GitHub
- Org mode has export-to-LaTeX capabilities
- Org mode supports code blocks in numerous languages which are
  executable directly in Emacs.
- In Org mode, a document can be divided into sections which are
  easily expanded or collapsed. This allows for keeping vast
  collections of notes in a single document which are easily
  navigable.
- Other features of Org mode:
  - To-do lists
  - Tables are easy to create
  - Hyperlinks are easy to include


* Obtaining Emacs

| Software  | Platforms         |
|-----------+-------------------|
| [[http://aquamacs.org][Aquamacs]]  | Mac               |
|-----------+-------------------|
| [[https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html][Gnu Emacs]] | Windows/Mac/Linux |
|-----------+-------------------|
| [[https://www.spacemacs.org/][spacemacs]] | Windows/Mac/Linux |

** Additional Notes

I'm a Mac user, so most of my insights here are gained on the Mac OS
X, which is fundamentally a form of UNIX. I try to generalize these
notes as much as possible.

Mac OS X comes with a version of Emacs installed, but as I first
started exploring Emacs, I found that the built-in version did not
support Org mode. Therefore, I favored Aquamacs, because it supported
Org mode and many of the other prerequisites for Org mode.

spacemacs appears to not be an actual Emacs program, but rather just a
layer that introduces some nice custom preferences.


* Getting Started With Emacs

Step zero in getting started with Emacs is to take the built-in
tutorial. To do this, fire up your Emacs program using the keystroke
=C-h t=. To use this keystroke, you must first understand this fairly
standard form for listing Emacs keystrokes. I describe it below. Once
you know how to do the keystrokes, you will be in a good position to
start the tutorial. Once you complete the tutorial, you will have
completed your first step in the journey to being an Emacs master.

** Emacs Keystrokes
In the following keystrokes (or "Macros"), =C= denotes the =CONTROL=
(or =CTRL=) key, and =M= denotes the =META= key. The =META= key is no
longer present on many modern keyboards, so, often, =M= is obtained by
pressing the =ESC= key.

The keystroke =C-x= indicates that =CTRL= should be depressed while
the =x= key is pressed and released. After =x= is released, the
keystroke =C-x= is accomplished, and =CTRL= may also be released.

The keystroke =M-x= is similar to =C-x=, but using the =META= key. In
practice, I find that on a Mac, I must press *and release* the =ESC=
key *before* I press the =x= key. Upon the release of =x=, the
keystroke =M-x= is accomplished.

Now, if you haven't already done so, start the built-in Emacs
tutorial.

** Summary of Useful Emacs Commands and Keystrokes
Here, I will use the terms "command" and "keystroke" and "macro"
interchangably.

*** File Input/Output Commands
The following commands are useful when editing files.
|-----------+------------------------|
| Macro     | Action                 |
|-----------+------------------------|
| =C-x C-x= | Save buffer to file.   |
|-----------+------------------------|
| =C-x C-c= | Quit Emacs             |
|-----------+------------------------|
| =C-a=     | Go to begining of line |
|-----------+------------------------|
| =C-e=     | Go to end of line      |
|-----------+------------------------|
| =C-x C-u= | Undo previous command  |

* Extending Emacs: elisp
The great power of Emacs is the fact that it is extensible. Emacs is
associated with its own programming languate, Emacs lisp (for short, I
call it ``elisp''. I'm not sure if I just made this up or if I read it
somewhere), and many extensions to Emacs are built on elisp. Ideally,
you will not need to do much elisp programming; however, some
extensions and customizations of Emacs require modifying your Emacs
preferences file by adding snippets of elisp code.

Often, the Emacs start-up file is your =~/.emacs= file. On Aquamacs,
it is typically the
=~/Library/Preferences/Aquamacs Emacs/Preferences.el= file.

There are some canonical sources from which you can learn about elisp:
- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/]["An Introduction to Programming in Emacs Lisp"]] is distributed with
  Emacs version 26.3. This document is verbose but conversational. I
  read the first two or three chapters in [[https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf][PDF]] form, and with my background in
  programming, I found the confidence to understand the basics of the
  preferences file or to learn more as necessary.
- [[https://www.gnu.org/software/emacs/manual/pdf/elisp.pdf]["GNU Emacs List Reference Manual"]] is probably a more concise manual
  than the previous listed item. I haven't read it yet!


* Extending Emacs: Org Mode
[[https://orgmode.org][Org mode]] is a powerful extension for Emacs which has been called ``the
scientist's note-taking system.'' Org mode enables many capabilties,
which include--but are not limited to:
- the taking of extsive, structured notes with support for
  - Itemized and enumerated lists and outlines
  - tables
- links
  - hyperlinks to Internet resources
  - internal links to sections, figures, tables, code blocks, etc.
- text markup
- significant LaTeX support, including:
  - math typesetting
  - export-to-LaTeX
  - references and bibliographies using bibTeX via the =org-ref=
    package (and other packages)
- embedding _executable_ code in documents in code blocks, with
  syntax highlighting for numerous documents 
- =*.org= document rendering on GitHub

One of the best introductions to Org mode--- and the one that got me
hooked--- is John Kitchin's [[https://youtu.be/fgizHHd7nOo][video]]. There's also a very famous [[https://youtu.be/oJTwQvgfgMM][Google
talk]] by Carsten Dominik, the author of Org mode.

** Summary of Useful Org Mode Commands and Keystrokes

The following useful commands are unique to Org mode.

*** Code Blocks

| Macro           | Action                     |
|-----------------+----------------------------|
| =C-c C-c=       | Execute code block         |
|-----------------+----------------------------|
| =C-c C-v t=     | Tangle all code blocks     |
|-----------------+----------------------------|
| =C-u C-c C-v t= | Tangle a single code block |
|                 |                            |


*** LaTeX Export Commands

| Macro         | Action                    |
|---------------+---------------------------|
| =C-c C-e l l= | Export to LaTeX document. |
|---------------+---------------------------|
| =C-c C-x C-l= | Render LaTeX equations.   |


*** Navigation

| Macro     | Action                            |
|-----------+-----------------------------------|
| =M-v=     | Page up                           |
|-----------+-----------------------------------|
| =C-v=     | Page down                         |
|-----------+-----------------------------------|
| =C-x C-o= | Open link (file, hyperlink, etc.) |
|           |                                   |

*** Outlines and Lists

Outline items are defined by starting a line with asterisks (=*=). The
number of asterisks determines the level of the outline item, as
follows:

|---------------------+-----------------------------------------------|
| Macro               | Action                                        |
|---------------------+-----------------------------------------------|
| =M+RET=             | Insert a new heading, item or row.            |
|---------------------+-----------------------------------------------|
| =OPT+RET=           | Insert a new heading, item or row. (Aquamacs) |
|---------------------+-----------------------------------------------|
| =OPT+(left arrow)=  | Promote outline/list item. (Aquamacs)         |
|---------------------+-----------------------------------------------|
| =OPT+(right arrow)= | Demote outline/list item. (Aquamacs)          |
|                     |                                               |


** Code Blocks in Org Mode

Code blocks may be:
- executed in org documents
  - Key bindings: =C-c C-c=
- written to the file system using =org-babel-tangle=. The Org-mode
  manual has [[https://orgmode.org/manual/Extracting-Source-Code.html][instructions on tangling code]].
  A code block can be tangled (written to the file system) if the
  first line includes the =:tangle= instruction. An example of	this
  might be: 

  #+BEGIN_VERBATIM
  #+BEGIN_SRC language :tangle filename
  < source code >
  #+END_SRC
  #+END_VERBATIM
  
  Then, the =org-babel-tangle= command may be invoked using =C-u C-c
  C-v t= (tangle a single code block) or =C-c C-v t= (tangle all code blocks).

*** Python in Org Mode

**** Setup

To enable executable Python code blocks in emacs, I added the
following to my =Preferences.el= file:
#+NAME: code-preferences-include-python
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

(setq org-babel-python-command "/Users/blair/anaconda3/bin/python3")
#+END_SRC

This code snippet serves two functions:
1. It adds code block support for Python
2. It specifies the path to the specific installation of Python which
   we desire to use.

**** Pythonic Hello World

This is an example of a basic Python script executed in Org mode:
#+begin_src python :results output
print('hello world')
#+end_src

#+RESULTS:
: hello world

**** Pythonic Hello World (tangled)

Now, I make a code block that can be tangled:
#+NAME: tangle-python-hello-world
#+BEGIN_SRC python :tangle hello_world_tangle.py
print("hello world. tangled.")
#+END_SRC

This exports the code to a file called =hello_world_tangle.py=. To run
the tangled file, a shell-script ('sh') code block like this may be
used:
#+NAME: run-tangled-python-script
#+BEGIN_SRC sh
python hello_world_tangle.py
#+END_SRC
Note: this works just fine on kodiak, but it doesn't work on my
Mac. On my Mac, I get =Symbol's function definition is void: org-babel-get-header=

To use a script like ref:run-tangled-python-script, something like the
following should be included in your preferences file:
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (sh . t)))
#+END_SRC
This adds support for shell scripts in the code block.


**** Troubleshooting

***** Code blocks do not evaluate
 I had an issue where I would try to evaluate code blocks, and then
 Emacs would tell me something like "Evaluation of this python code
 block is disabled." I then found a [[https://www.reddit.com/r/emacs/comments/820ny1/code_block_eval_disabled/][reddit discussion]] telling me that
 if I go to the org-mode package folder and delete any compiled elisp
 files (*.elc) and restart Aquaemacs, I can once again evaluate code
 blocks. 

***** Python Code Blocks always return ": None" in the output
It is helpful to add =:results output= in the first line of the code
block. A [[https://emacs.stackexchange.com/questions/17926/python-org-mode-source-block-output-is-always-none][StackExchange discussion]] exists on this topic.

*** MATLAB in Org Mode
My source here are:
1. [[http://gewhere.github.io/blog/2017/12/19/setup-matlab-in-emacs-and-babel-orgmode/][Georgios Diapoulis' blog]]
2. A [[https://sourceforge.net/p/matlab-emacs/mailman/message/36089463/][SourceForge post]] by Cumhur Erkut

**** Setup
Step zero is to have a valid, licensed installation of MATLAB. To set
up MATLAB with Emacs, do the following: 
1. Install the =matlab-mode= package for Emacs using =M-x
   package-install= followed by ENTER, followed by =matlab-mode=
2. Create an Emacs wrapper for MATLAB.
   1. The following code block defines an Emacs wrapper for
      MATLAB. It's customized for my computer, so you should customize
      the path to your MATLAB program and tangle it to your file space
      as you see fit: 
      #+begin_src sh :tangle ~/matlab_emacs_wrapper :shebang "#!/bin/bash" :padline no
      # https://ch.mathworks.com/matlabcentral/answers/319655-why-does-matlab-r2016b-crash-when-launched-from-matlab-emacs?
      shell_stack_size=$(ulimit -s)
      
      adjusted_stack_size=$[4*((($shell_stack_size-1)/4)+1)]
      
      ulimit -s $adjusted_stack_size && /Applications/MATLAB_R2020a.app/bin/matlab $@
      #+end_src
      Note:
      1. If I tangle this to the file system, Emacs recognizes that it
         has a shebang and makes it executable
      2. If I copy and paste this into the file system, then I need to
         make it executable by typing in the command line
         #+BEGIN_SRC sh
         chmod 755 ~/matlab_emacs_wrapper
         #+END_SRC
   2. Diapoulis recommends running the script to see if you can
      make MATLAB run properly. Notes:
      1. The script ran from the command prompt for me
      2. The script did not run from an Emacs code block
3. Add the following to your Emacs preferences file:
   1. Define the =matlab-shell= command
      #+begin_verbatim elisp
      ;; establish/customize the matlab-shell command
      (setq matlab-shell-command "/Applications/MATLAB_R2020a.app/matlab")
      (customize-set-variable 'matlab-shell-command
      "~/matlab_emacs_wrapper")
      #+end_verbatim
   2. Load =org-babel= support for MATLAB by adding =(matlab . t)= to
      your =org-babel-do-load-languages= statement. Since I want
      support for Python, shell and MATLAB, my statement looks like this:
      #+begin_verbatim elisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (sh . t)
         (matlab . t)))
      #+end_verbatim
4. Save and close all Emacs work and restart Emacs. This will load
   your new preferences.
5. Upon restarting, if you set things up properly, 

*** Testing

#+BEGIN_SRC matlab
%% Here is a MATLAB region
disp('hello world')
%% Numerical result
x = 5; % output supressed
y = 7 % output not suppressed
z = x+y % output not suppressed
#+END_SRC

#+RESULTS:
#+begin_example
%% Here is a MATLAB region
disp('hello world')
hello world
%% Numerical result
x = 5;
y = 7

y =

     7
z = x+y

z =

    12
#+end_example



This doesn't work for me. I get an error saying, "Autoloading failed
to define function matlab-shell"
* Extending Emacs Org mode: Org-ref

** Introduction to =org-ref=
=org-ref= is a powerfully-helpful package for creating and managing
references in =org-mode=, with support for LaTeX export. Perhaps the
best introduction to =org-ref= is in the form of John Kitchin's [[https://youtu.be/2t925KRBbFc][video]].

** Installing =org-ref=
Org-ref may be installed easily by (1) typing =M-x package-install= and
then (2) specifiying =org-ref=. You may be required to perform an
intervening safety/security step between (1) and (2) of confirming
that you allow Emacs to communicate with the outside world by typing
=Always=.

Once =org-ref= is installed, you may need to make sure it's "required"
in your Emacs start-up file.

To get =org-ref= to work properly, I had to add
#+BEGIN_SRC elisp
(require 'org-ref)
#+END_SRC
to my preferences file.

Additionally, =helm-bibtex= is a useful part of =org-ref=, so I found
it helpful to also add to my preferences file:
#+BEGIN_SRC elisp
(require 'helm-bibtex)
#+END_SRC



* LaTeX Export using Org Mode
One of the reasons I like Org mode is that it allows LaTeX
export. With a few physical keystrokes (=C-c C-e l l=), I can export my notes to a
LaTeX document. I can also set up Emacs to export and view the
document (=C-c C-e l o=), but I haven't got that one working yet (I
need to set this up so that my LaTeX program performs the right number
of LaTeX compiles and BibTeX compiles).

** Fine Tuning

*** Front Matter
**** Adding a Page Break after the TOC
 When using the =\documentclass{article}=, the default is for the
 secions of content to immediately follow the table of contents (TOC)
 without an intervening page break. A StackExchange thread discusses
 how to [[https://emacs.stackexchange.com/questions/42558/org-mode-export-force-page-break-after-toc][add a page break]] after the TOC.

 To do this, we add the following to our Emacs preference file:
 #+BEGIN_SRC lisp
 (setq org-latex-toc-command "\\tableofcontents \\clearpage")
 #+END_SRC


*** Modifying the LaTeX Preamble
All LaTeX documents have a preamble, which is content between the
=\documentclass{...}= command and the =\begin{document}= command. This
is where much cusomization is implemented.

Lines may be added to the preamble by using
#+BEGIN_SRC latex
#+LATEX_HEADER: ...
#+END_SRC
where =...= is a placeholder for a line of LaTeX preamble content.

**** Adding Packages
To add special capabilities beyond standard LaTeX, we can add
packages. This is done in the preamble by adding a line with the
=\usepackage{}= command.

Some packages I find useful:

| Package    | Description                                        |
|------------+----------------------------------------------------|
| =braket=   | Supports Dirac braket notation.                    |
|------------+----------------------------------------------------|
| =geometry= | Allows easy customization of layout (esp. margins) |
|------------+----------------------------------------------------|
| =mhchem=   | Supports chemical equations and formulas           |

For Org mode LaTeX export, use the =#+LATEX_HEADER:= directive, and
then add the desired preamble line.

For example, I might add the following to an
Org mode document:

#+BEGIN_SRC
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{braket}
#+END_SRC

*** Beamer
Beamer is a LaTeX class for presentations. The org-mode reference has
a section on beamer, but there also is a nice page on orgmode.org
titled "[[https://orgmode.org/worg/exporters/beamer/ox-beamer.html][Beamer presentations using the new export engine]]".

* Illustrations in Org mode

** TikZ and Org mode
We can make plots in MATLAB or Python using code blocks. Another
option is to use TikZ. TikZ is a package for LaTeX and has become my
favourite illustrating system (so much so that I use the British
spelling of /favorite/). I learned from a blogger (I learned
after my use of /favourite/ that the blogger is British) that we can
[[https://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html][make LaTeX code blocks that produce TikZ graphics]].

*** Setup
The blog post or a search leads us to the Org manual page on
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][LaTeX code blocks]]. To set up LaTeX code blocks, we perform the
following: 
1. Point Emacs to the LaTeX executable by adding this to my
   preferences file:
   #+begin_verbatim elisp
   ;; point Emacs to latex on my Mac
   (setq exec-path (append exec-path '("/Library/TeX/texbin")))
   #+end_verbatim
2. Enable =org-babel= support for LaTeX. To do this, we add ='((latex
   . t))= to our Emacs preferences file within the
   =org-babel-do-load-languages= command. Thus, to support Python,
   shell, and LaTeX, I have the following in my preferences file:
   #+begin_verbatim elisp
   ;; Adds support for executable Python code blocks
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (sh . t)
      (latex . t)))
   #+end_verbatim
3. Install the =auctex= package
   1. Use =M-x package-install= followed by =acutex=.
   2. Add =(load "auctex.el" nil t t)= to my preferences file.

*** Examples
These examples need some work. They produce the following:
- An SVG that doesn't render as an image in Org mode
  - Maybe I can set up Org mode to render SVG
- A PDF with a crazy hashed name, and not in the destination I
  want. The PDF doesn't render in Org mode, but rather gets displayed
  in Adobe Acrobat.

This first example produces a =*.svg= file. Copying - with a
few adaptations - from the blog post, I have:
#+HEADER: :file img/contour.svg :imagemagick yes
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600
#+BEGIN_src latex
\begin{tikzpicture}
\draw[->] (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0] (-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
\filldraw (-1.5,0) circle[radius=1mm];
\filldraw (1.5,0) circle[radius=1mm];
\end{tikzpicture}
#+END_src

Unfortunately, I didn't get the SVG to render well in Org mode. It
probably would render well - as intended - in the blogger's html
result.

The [[https://emacs.stackexchange.com/questions/20488/how-do-i-create-a-floating-tikz-figure-when-exporting-to-pdf-in-org-mode][next example]] comes from StackExchange and produces a pdf:
#+HEADER: :file img/fsa.pdf
#+HEADER: :results raw silent :headers '("\\usepackage{tikz}")
#+begin_src latex :border 1em
  % Define block styles
  \usetikzlibrary{shapes,arrows}
  \tikzstyle{astate} = [circle, draw, text centered, font=\footnotesize, fill=blue!25]
  \tikzstyle{rstate} = [circle, draw, text centered, font=\footnotesize, fill=red!25]

  \begin{tikzpicture}[->,>=stealth', shorten >=1pt, auto, node distance=2.8cm, semithick]
    \node [astate] (1) at (0,0) {1};
    \node [astate] (2) at (1,0) {2};
    \node [rstate] (3) at (2,0) {3};
    \path (1) edge [bend left] node {b} (2)
          (2) edge node {b} (3)
          (2) edge [bend left] node {a} (1)
          (3) edge [loop above] node {(a, b)} (3);
  \end{tikzpicture}
#+end_src
The problem here is that it doesn't produce the result in the right
place, nor does it provide the right file name. I had to manually copy
the result from the present directory (containing this Org file) to
the destination directory. Additionally, the file had some hashed
name, so I renamed it to the desired name.

#+RESULTS:

To display the PDF result here, we use:
#+CAPTION: tikz caption
#+LABEL: fig:tikz
#+RESULTS:
[[./img/fsa.pdf]]
The other problem is that this link opens in Adobe Acrobat, and not in
an Emacs buffer.


I also tried exporting to =eps=, but that didn't work so well.

#+HEADER: :file img/contour.eps :imagemagick yes
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600
#+BEGIN_src latex
\begin{tikzpicture}
\draw[->] (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0] (-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
\filldraw (-1.5,0) circle[radius=1mm];
\filldraw (1.5,0) circle[radius=1mm];
\end{tikzpicture}
#+END_src
